version: '3.8'

# This is a master Docker Compose file that includes all headless servers
# You can use this file to start all services at once with:
# docker-compose -f docker-compose.headless-servers.yml up -d

# Alternatively, you can use the individual Docker Compose files for each service:
# docker-compose -f docker-compose..yml up -d
# docker-compose -f docker-compose..yml up -d
# docker-compose -f docker-compose.activepieces.yml up -d
# docker-compose -f docker-compose.code-server.yml up -d
# docker-compose -f docker-compose.ollama.yml up -d
# docker-compose -f docker-compose.vircadia.yml up -d

services:
  # Nginx Reverse Proxy for all headless servers
  nginx:
    image: nginx:alpine
    container_name: rica-headless-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
      - "2020:2020"
      - "2021:2021"
      - "2022:2022"
      - "2023:2023"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./headless-servers.conf:/etc/nginx/conf.d/headless-servers.conf
      - ./certs:/etc/nginx/certs
      - ./nginx/ssl-dhparams.pem:/etc/nginx/ssl-dhparams.pem
    depends_on:
      - 
      - 
      - activepieces
      - code-server
      - ollama
      - vircadia
    networks:
      - rica-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  #  (Fabric)
  :
    image: /worker:5.12.12
    container_name: 
    restart: always
    environment:
      - NODE_OPTIONS=--max_old_space_size=8192
      - APP__PORT=4000
      - APP__ADMIN__EMAIL=admin@.io
      - APP__ADMIN__PASSWORD=${_ADMIN_PASSWORD:-ChangeMeInProduction123!}
      - APP__ADMIN__TOKEN=${_ADMIN_TOKEN:-ChangeMeInProduction123!}
      - REDIS__HOSTNAME=redis
      - ELASTICSEARCH__URL=http://elasticsearch:9200
      - MINIO__ENDPOINT=minio
      - MINIO__PORT=9000
      - MINIO__USE_SSL=false
      - MINIO__ACCESS_KEY=minio
      - MINIO__SECRET_KEY=${MINIO_SECRET_KEY:-miniokey}
      - RABBITMQ__HOSTNAME=rabbitmq
      - RABBITMQ__PORT=5672
      - RABBITMQ__PORT_MANAGEMENT=15672
      - RABBITMQ__MANAGEMENT_SSL=false
      - RABBITMQ__USERNAME=guest
      - RABBITMQ__PASSWORD=${RABBITMQ_PASSWORD:-guest}
    depends_on:
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      minio:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:4000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - rica-network

 

  # Activepieces (Automation Platform)
  activepieces:
    image: activepieces/activepieces:latest
    container_name: activepieces
    restart: always
    environment:
      - AP_ENGINE_EXECUTABLE_PATH=dist/packages/engine/main.js
      - AP_API_KEY=${AP_API_KEY:-changeme_in_production}
      - AP_ENCRYPTION_KEY=${AP_ENCRYPTION_KEY:-changeme_in_production}
      - AP_JWT_SECRET=${AP_JWT_SECRET:-changeme_in_production}
      - AP_ENVIRONMENT=prod
      - AP_FRONTEND_URL=http://localhost:2020
      - AP_WEBHOOK_TIMEOUT_SECONDS=30
      - AP_TRIGGER_DEFAULT_POLL_INTERVAL=5
      - AP_POSTGRES_DATABASE=activepieces
      - AP_POSTGRES_HOST=postgres
      - AP_POSTGRES_PORT=5432
      - AP_POSTGRES_USERNAME=activepieces
      - AP_POSTGRES_PASSWORD=${AP_POSTGRES_PASSWORD:-activepieces}
      - AP_REDIS_HOST=redis
      - AP_REDIS_PORT=6379
      - AP_REDIS_PASSWORD=${REDIS_PASSWORD:-ChangeMeInProduction123!}
      - AP_SANDBOX_RUN_TIME_SECONDS=600
      - AP_TELEMETRY_ENABLED=false
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:80/api/v1/flags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - activepieces_data:/root/.activepieces
    networks:
      - rica-network

  # Code Server (VS Code in browser)
  code-server:
    image: codercom/code-server:latest
    container_name: code-server
    restart: always
    environment:
      - PASSWORD=${CODE_SERVER_PASSWORD:-ChangeMeInProduction123!}
      - SUDO_PASSWORD=${CODE_SERVER_SUDO_PASSWORD:-ChangeMeInProduction123!}
      - DEFAULT_WORKSPACE=/home/coder/project
    volumes:
      - code_data:/home/coder
    networks:
      - rica-network

  # Ollama (for DeepSeek)
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    restart: always
    ports:
      - "2022:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - rica-network

  # Vircadia World Server
  vircadia:
    image: vircadia/vircadia-world:latest
    container_name: vircadia_world_server
    restart: always
    ports:
      - "2023:3020"
    environment:
      - VRCA_SERVER_CONTAINER_NAME=vircadia_world_server
      - VRCA_SERVER_DEBUG=false
      - VRCA_SERVER_SUPPRESS=false
      # API Manager
      - VRCA_SERVER_SERVICE_WORLD_API_MANAGER_CONTAINER_NAME=vircadia_world_api_manager
      - VRCA_SERVER_SERVICE_WORLD_API_MANAGER_HOST_CONTAINER_BIND_INTERNAL=0.0.0.0
      - VRCA_SERVER_SERVICE_WORLD_API_MANAGER_PORT_CONTAINER_BIND_INTERNAL=3020
      - VRCA_SERVER_SERVICE_WORLD_API_MANAGER_HOST_CONTAINER_BIND_EXTERNAL=0.0.0.0
      - VRCA_SERVER_SERVICE_WORLD_API_MANAGER_PORT_CONTAINER_BIND_EXTERNAL=3020
      - VRCA_SERVER_SERVICE_WORLD_API_MANAGER_HOST_PUBLIC_AVAILABLE_AT=127.0.0.1
      - VRCA_SERVER_SERVICE_WORLD_API_MANAGER_PORT_PUBLIC_AVAILABLE_AT=2023
      # State Manager
      - VRCA_SERVER_SERVICE_WORLD_STATE_MANAGER_CONTAINER_NAME=vircadia_world_state_manager
      - VRCA_SERVER_SERVICE_WORLD_STATE_MANAGER_HOST_CONTAINER_BIND_INTERNAL=0.0.0.0
      - VRCA_SERVER_SERVICE_WORLD_STATE_MANAGER_PORT_CONTAINER_BIND_INTERNAL=3021
      - VRCA_SERVER_SERVICE_WORLD_STATE_MANAGER_HOST_CONTAINER_BIND_EXTERNAL=0.0.0.0
      - VRCA_SERVER_SERVICE_WORLD_STATE_MANAGER_PORT_CONTAINER_BIND_EXTERNAL=3021
      # Postgres Integration
      - VRCA_SERVER_SERVICE_POSTGRES_CONTAINER_NAME=postgres
      - VRCA_SERVER_SERVICE_POSTGRES_HOST_CONTAINER_BIND_EXTERNAL=postgres
      - VRCA_SERVER_SERVICE_POSTGRES_PORT_CONTAINER_BIND_EXTERNAL=5432
      - VRCA_SERVER_SERVICE_POSTGRES_DATABASE=vircadia_world_db
      - VRCA_SERVER_SERVICE_POSTGRES_SUPER_USER_USERNAME=vircadia
      - VRCA_SERVER_SERVICE_POSTGRES_SUPER_USER_PASSWORD=${VIRCADIA_DB_PASSWORD:-ChangeMeInProduction123!}
      - VRCA_SERVER_SERVICE_POSTGRES_SQL_ENV_PREFIX=VRCA_SERVER
      - VRCA_SERVER_SERVICE_POSTGRES_AGENT_PROXY_USER_USERNAME=vircadia_agent_proxy
      - VRCA_SERVER_SERVICE_POSTGRES_AGENT_PROXY_USER_PASSWORD=${VIRCADIA_AGENT_PASSWORD:-ChangeMeInProduction123!}
      - VRCA_SERVER_SERVICE_POSTGRES_EXTENSIONS=uuid-ossp,hstore,pgcrypto
    volumes:
      - vircadia_data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3020/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - rica-network

  # Vircadia Web Client (Spatial UI)
  vircadia-web:
    build:
      context: ./vircadia-web-2024.2.1
      dockerfile: Dockerfile
    container_name: vircadia_web_client
    restart: always
    ports:
      - "2024:80"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://vircadia:3020/api
    depends_on:
      - vircadia
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - rica-network

  # Redis
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD:-ChangeMeInProduction123!}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - rica-network

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: elasticsearch
    restart: always
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - rica-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # MinIO
  minio:
    image: minio/minio:RELEASE.2023-07-21T21-12-50Z
    container_name: minio
    restart: always
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-miniokey}
    volumes:
      - minio_data:/data
    networks:
      - rica-network

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3.11-management-alpine
    container_name: rabbitmq
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-guest}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - rica-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_MULTIPLE_DATABASES: activepieces,vircadia_world_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rica-network

volumes:
  ollama_data:
  redis_data:
  es_data:
  minio_data:
  rabbitmq_data:
  postgres_data:
  code_data:
  activepieces_data:
  vircadia_data:

networks:
  rica-network:
    external: true
    name: rica-network