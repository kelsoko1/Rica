import React, {useState, useEffect} from 'react';
import LeftNav from './components/LeftNav';
import StarrySidebar from './components/StarrySidebar';
import Starfield from './components/Starfield';
import ProjectExplorer from './components/ProjectExplorer';
import IntegratedTerminal from './components/IntegratedTerminal';
import ThreatDashboard from './components/ThreatDashboard';
import BrowserTabs from './components/BrowserTabs';
import SimsFrame from './components/SimsFrame';
import FabricFrame from './components/FabricFrame';
import ResizablePanel from './components/ResizablePanel';
import VerticalResizer from './components/VerticalResizer';
import './components/Workspace.css';
import './components/ResizablePanel.css';
import './components/VerticalResizer.css';

export default function App(){
  const [leftCollapsed, setLeftCollapsed] = useState(false);
  const [starryOpen, setStarryOpen] = useState(true);
  const [mobileNavVisible, setMobileNavVisible] = useState(false);
  const [activeNavItem, setActiveNavItem] = useState('threats');
  const [terminalVisible, setTerminalVisible] = useState(false);
  const [terminalHeight, setTerminalHeight] = useState(300); // Default height in pixels
  const [leftNavWidth, setLeftNavWidth] = useState(240); // Default width for left nav
  
  const handleNavItemChange = (item) => {
    setActiveNavItem(item);
    
    // Show terminal by default when switching to project view
    if (item === 'project') {
      setTerminalVisible(true);
    }
  };
  
  const toggleTerminal = () => {
    setTerminalVisible(!terminalVisible);
  };

  const toggleMobileNav = () => {
    setMobileNavVisible(!mobileNavVisible);
  };

  return (
    <div className={'app ' + (leftCollapsed ? 'left-collapsed' : '') + (starryOpen ? ' starry-open' : '')}>
      {/* Mobile overlay */}
      <div 
        className={`mobile-overlay ${mobileNavVisible ? 'visible' : ''}`}
        onClick={() => setMobileNavVisible(false)}
      />
      
      {/* Left navigation with resizable panel */}
      <ResizablePanel 
        initialWidth={leftCollapsed ? 64 : 240} 
        minWidth={64} 
        maxWidth={500}
      >
        <LeftNav 
          collapsed={leftCollapsed} 
          onToggle={()=>setLeftCollapsed(s=>!s)} 
          className={mobileNavVisible ? 'mobile-visible' : ''}
          onNavItemChange={handleNavItemChange}
        />
      </ResizablePanel>
      
      <div className="center-area resizable">
        <div className="topbar">
          <div className="top-left">
            <button 
              className="menu-btn" 
              onClick={() => {
                if (window.innerWidth <= 900) {
                  toggleMobileNav();
                } else {
                  setLeftCollapsed(s=>!s);
                }
              }}
            >
              <svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M3 12H21" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                <path d="M3 6H21" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                <path d="M3 18H21" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
              </svg>
            </button>
            
            <div className="app-title">
              <span className="app-name">Rica</span>
              <span className="app-separator">â€¢</span>
              <span className="app-section">Threat Intelligence</span>
            </div>
          </div>
          
          <div className="top-right">
            <button 
              className={`terminal-toggle ${terminalVisible ? 'active' : ''}`} 
              onClick={toggleTerminal}
              title={terminalVisible ? "Hide Terminal" : "Show Terminal"}
            >
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M4 17L10 11L4 5" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                <path d="M12 19H20" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
              </svg>
              <span>Terminal</span>
            </button>
            
            <div className="credits">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M12 1V23" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                <path d="M17 5H9.5C8.57174 5 7.6815 5.36875 7.02513 6.02513C6.36875 6.6815 6 7.57174 6 8.5C6 9.42826 6.36875 10.3185 7.02513 10.9749C7.6815 11.6313 8.57174 12 9.5 12H14.5C15.4283 12 16.3185 12.3687 16.9749 13.0251C17.6313 13.6815 18 14.5717 18 15.5C18 16.4283 17.6313 17.3185 16.9749 17.9749C16.3185 18.6313 15.4283 19 14.5 19H6" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
              </svg>
              <strong id="bal">25</strong>
            </div>
            
            <div className="user-menu">
              <div className="user-avatar">KD</div>
              <div className="user-info">
                <div className="user-name">Kelvin Demo</div>
                <div className="user-role">Security Analyst</div>
              </div>
            </div>
            
            <button 
              className={`starry-toggle ${starryOpen ? 'active' : ''}`}
              onClick={()=>setStarryOpen(s=>!s)}
            >
              {starryOpen ? 'Close Starry' : 'Open Starry'}
            </button>
          </div>
        </div>

        <div className="workspace">
          {!activeNavItem && (
            <div className="workspace-placeholder">
              <svg width="80" height="80" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M3 9L12 2L21 9V20C21 20.5304 20.7893 21.0391 20.4142 21.4142C20.0391 21.7893 19.5304 22 19 22H5C4.46957 22 3.96086 21.7893 3.58579 21.4142C3.21071 21.0391 3 20.5304 3 20V9Z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                <path d="M9 22V12H15V22" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
              </svg>
              <h2>Welcome to Rica</h2>
              <p>Select an item from the sidebar to display content</p>
            </div>
          )}
          {activeNavItem === 'browser' && <BrowserTabs />}
          {activeNavItem === 'project' && (
            <div className="project-view">
              <ProjectExplorer />
              <div className="code-editor-container">
                <div className="code-editor-area">
                  <div className="editor-tabs">
                    <div className="editor-tab active">
                      <span>App.js</span>
                      <button className="close-tab">
                        <svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path d="M18 6L6 18" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                          <path d="M6 6L18 18" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                        </svg>
                      </button>
                    </div>
                    <div className="editor-tab">
                      <span>CenterGraph.js</span>
                      <button className="close-tab">
                        <svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path d="M18 6L6 18" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                          <path d="M6 6L18 18" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                        </svg>
                      </button>
                    </div>
                  </div>
                  <div className="code-editor">
                    <div className="line-numbers">
                      {Array.from({length: 20}, (_, i) => (
                        <div key={i} className="line-number">{i + 1}</div>
                      ))}
                    </div>
                    <div className="editor-content">
                      <pre className="code-content">
                        <code>
                          {`import React, {useState, useEffect} from 'react';
import LeftNav from './components/LeftNav';
import StarrySidebar from './components/StarrySidebar';
import Starfield from './components/Starfield';
import CenterGraph from './components/CenterGraph';
import ProjectExplorer from './components/ProjectExplorer';
import IntegratedTerminal from './components/IntegratedTerminal';

export default function App(){
  const [leftCollapsed, setLeftCollapsed] = useState(false);
  const [starryOpen, setStarryOpen] = useState(true);
  const [mobileNavVisible, setMobileNavVisible] = useState(false);
  const [activeNavItem, setActiveNavItem] = useState(null);
  const [terminalVisible, setTerminalVisible] = useState(false);
  
  const handleNavItemChange = (item) => {
    setActiveNavItem(item);
    
    // Show terminal by default when switching to project view
    if (item === 'project') {
      setTerminalVisible(true);
    }
  };

  const toggleTerminal = () => {
    setTerminalVisible(!terminalVisible);
  };

  return (
    <div className={'app ' + (leftCollapsed ? 'left-collapsed' : '') + (starryOpen ? ' starry-open' : '')}>
      {/* Component content... */}
    </div>
  );
}`}
                        </code>
                      </pre>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}
          {activeNavItem === 'threats' && <ThreatDashboard />}
          {activeNavItem === 'sims' && <SimsFrame />}
          {activeNavItem === 'fabric' && <FabricFrame />}
        </div>
        
        {/* Terminal panel with vertical resizer */}
        {terminalVisible && (
          <div className="terminal-container">
            <VerticalResizer 
              height={terminalHeight} 
              setHeight={setTerminalHeight} 
              minHeight={100} 
              maxHeight={800}
            />
            <div className="terminal-panel" style={{ height: `${terminalHeight}px` }}>
              <IntegratedTerminal />
            </div>
          </div>
        )}
      </div>
      
      {/* Right sidebar */}
      <StarrySidebar open={starryOpen} onClose={()=>setStarryOpen(false)} />
      
      {/* Background effect */}
      <Starfield />
    </div>
  );
}
