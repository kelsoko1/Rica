import React, { createContext, useContext, useState, useCallback, useEffect } from 'react';
import Notifications from './Notifications';

// Create notification context
const NotificationContext = createContext();

/**
 * Notification Provider Component
 * Provides notification functionality to all child components
 */
export const NotificationProvider = ({ children }) => {
  const [notifications, setNotifications] = useState([]);
  
  // Add notification
  const addNotification = useCallback((notification) => {
    const id = Date.now();
    setNotifications(prevNotifications => [
      ...prevNotifications,
      { ...notification, id },
    ]);
    return id;
  }, []);
  
  // Remove notification
  const removeNotification = useCallback((id) => {
    setNotifications(prevNotifications => 
      prevNotifications.filter(notification => notification.id !== id)
    );
  }, []);
  
  // Notification methods
  const success = useCallback((message, options = {}) => 
    addNotification({ type: 'success', message, ...options }), [addNotification]);
  
  const error = useCallback((message, options = {}) => 
    addNotification({ type: 'error', message, ...options }), [addNotification]);
  
  const warning = useCallback((message, options = {}) => 
    addNotification({ type: 'warning', message, ...options }), [addNotification]);
  
  const info = useCallback((message, options = {}) => 
    addNotification({ type: 'info', message, ...options }), [addNotification]);
  
  // Context value
  const contextValue = {
    notifications,
    addNotification,
    removeNotification,
    success,
    error,
    warning,
    info,
  };
  
  // Expose methods on window object
  useEffect(() => {
    window.ricaNotifications = {
      success,
      error,
      warning,
      info
    };
    
    return () => {
      delete window.ricaNotifications;
    };
  }, [success, error, warning, info]);
  
  return (
    <NotificationContext.Provider value={contextValue}>
      {children}
      <Notifications
        notifications={notifications}
        removeNotification={removeNotification}
      />
    </NotificationContext.Provider>
  );
};

/**
 * Custom hook to use notifications
 * @returns {Object} Notification methods
 */
export const useNotifications = () => {
  const context = useContext(NotificationContext);
  
  if (!context) {
    throw new Error('useNotifications must be used within a NotificationProvider');
  }
  
  return context;
};

export default NotificationProvider;
