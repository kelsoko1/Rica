version: '3.8'

# Docker Compose file for Vircadia World server
# This file can be used to start the Vircadia server standalone:
# docker-compose -f docker-compose.vircadia.yml up -d

services:
  # Vircadia World Server
  vircadia:
    image: vircadia/vircadia-world:latest
    container_name: vircadia_world_server
    restart: always
    ports:
      - "2023:3020"
    environment:
      - VRCA_SERVER_CONTAINER_NAME=vircadia_world_server
      - VRCA_SERVER_DEBUG=false
      - VRCA_SERVER_SUPPRESS=false
      # API Manager
      - VRCA_SERVER_SERVICE_WORLD_API_MANAGER_CONTAINER_NAME=vircadia_world_api_manager
      - VRCA_SERVER_SERVICE_WORLD_API_MANAGER_HOST_CONTAINER_BIND_INTERNAL=0.0.0.0
      - VRCA_SERVER_SERVICE_WORLD_API_MANAGER_PORT_CONTAINER_BIND_INTERNAL=3020
      - VRCA_SERVER_SERVICE_WORLD_API_MANAGER_HOST_CONTAINER_BIND_EXTERNAL=0.0.0.0
      - VRCA_SERVER_SERVICE_WORLD_API_MANAGER_PORT_CONTAINER_BIND_EXTERNAL=3020
      - VRCA_SERVER_SERVICE_WORLD_API_MANAGER_HOST_PUBLIC_AVAILABLE_AT=127.0.0.1
      - VRCA_SERVER_SERVICE_WORLD_API_MANAGER_PORT_PUBLIC_AVAILABLE_AT=2023
      # State Manager
      - VRCA_SERVER_SERVICE_WORLD_STATE_MANAGER_CONTAINER_NAME=vircadia_world_state_manager
      - VRCA_SERVER_SERVICE_WORLD_STATE_MANAGER_HOST_CONTAINER_BIND_INTERNAL=0.0.0.0
      - VRCA_SERVER_SERVICE_WORLD_STATE_MANAGER_PORT_CONTAINER_BIND_INTERNAL=3021
      - VRCA_SERVER_SERVICE_WORLD_STATE_MANAGER_HOST_CONTAINER_BIND_EXTERNAL=0.0.0.0
      - VRCA_SERVER_SERVICE_WORLD_STATE_MANAGER_PORT_CONTAINER_BIND_EXTERNAL=3021
      # Postgres Integration
      - VRCA_SERVER_SERVICE_POSTGRES_CONTAINER_NAME=postgres
      - VRCA_SERVER_SERVICE_POSTGRES_HOST_CONTAINER_BIND_EXTERNAL=postgres
      - VRCA_SERVER_SERVICE_POSTGRES_PORT_CONTAINER_BIND_EXTERNAL=5432
      - VRCA_SERVER_SERVICE_POSTGRES_DATABASE=vircadia_world_db
      - VRCA_SERVER_SERVICE_POSTGRES_SUPER_USER_USERNAME=vircadia
      - VRCA_SERVER_SERVICE_POSTGRES_SUPER_USER_PASSWORD=${VIRCADIA_DB_PASSWORD:-ChangeMeInProduction123!}
      - VRCA_SERVER_SERVICE_POSTGRES_SQL_ENV_PREFIX=VRCA_SERVER
      - VRCA_SERVER_SERVICE_POSTGRES_AGENT_PROXY_USER_USERNAME=vircadia_agent_proxy
      - VRCA_SERVER_SERVICE_POSTGRES_AGENT_PROXY_USER_PASSWORD=${VIRCADIA_AGENT_PASSWORD:-ChangeMeInProduction123!}
      - VRCA_SERVER_SERVICE_POSTGRES_EXTENSIONS=uuid-ossp,hstore,pgcrypto
    volumes:
      - vircadia_data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3020/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - rica-network

  # PostgreSQL (if not already running)
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_MULTIPLE_DATABASES: vircadia_world_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rica-network

volumes:
  vircadia_data:
  postgres_data:

networks:
  rica-network:
    external: true
    name: rica-network
