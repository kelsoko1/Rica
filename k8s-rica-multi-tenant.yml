# Rica Multi-tenant SaaS Kubernetes Deployment

---
# Namespace for Rica platform services
apiVersion: v1
kind: Namespace
metadata:
  name: rica-platform
  labels:
    name: rica-platform

---
# ConfigMap for Credit Metering Service
apiVersion: v1
kind: ConfigMap
metadata:
  name: credit-metering-config
  namespace: rica-platform
data:
  PRICING_CPU: "0.04"
  PRICING_MEMORY: "0.008"
  PRICING_STORAGE: "0.0002"
  PRICING_ACTIVEPIECES_CALL: "0.001"
  PRICING_OLLAMA_TOKEN: "0.00001"
  PRICING_VIRCADIA_MINUTE: "0.005"
  PRICING_CODESERVER_MINUTE: "0.002"
  AD_REVENUE_VIDEO: "0.01"
  AD_REVENUE_BANNER: "0.001"
  AD_REVENUE_INTERSTITIAL: "0.005"
  AD_REVENUE_SPONSORED: "0.02"
  COLLECTION_INTERVAL: "60000"
  FLUSH_INTERVAL: "300000"

---
# Credit Metering Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: credit-metering-service
  namespace: rica-platform
spec:
  replicas: 2
  selector:
    matchLabels:
      app: credit-metering
  template:
    metadata:
      labels:
        app: credit-metering
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3100"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: credit-metering
        image: rica/credit-metering:latest
        ports:
        - containerPort: 3100
          name: http
        env:
        - name: PORT
          value: "3100"
        - name: NODE_ENV
          value: "production"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: rica-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: rica-secrets
              key: redis-url
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: rica-secrets
              key: api-key
        envFrom:
        - configMapRef:
            name: credit-metering-config
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3100
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 3100
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3

---
# Credit Metering Service
apiVersion: v1
kind: Service
metadata:
  name: credit-metering-service
  namespace: rica-platform
  labels:
    app: credit-metering
spec:
  selector:
    app: credit-metering
  ports:
  - port: 3100
    targetPort: 3100
    name: http
  type: ClusterIP

---
# K8s Resource Collector Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: resource-collector
  namespace: rica-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: resource-collector
  template:
    metadata:
      labels:
        app: resource-collector
    spec:
      serviceAccountName: resource-collector
      containers:
      - name: collector
        image: rica/resource-collector:latest
        env:
        - name: CREDIT_SERVICE_URL
          value: "http://credit-metering-service:3100"
        - name: COLLECTION_INTERVAL
          value: "60000"
        - name: NODE_ENV
          value: "production"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          exec:
            command: ["node", "-e", "process.exit(0)"]
          initialDelaySeconds: 30
          periodSeconds: 60

---
# ServiceAccount for Resource Collector
apiVersion: v1
kind: ServiceAccount
metadata:
  name: resource-collector
  namespace: rica-platform

---
# ClusterRole for Resource Collector
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: resource-collector
rules:
- apiGroups: [""]
  resources: ["namespaces", "pods", "persistentvolumeclaims"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods"]
  verbs: ["get", "list"]

---
# ClusterRoleBinding for Resource Collector
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: resource-collector
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: resource-collector
subjects:
- kind: ServiceAccount
  name: resource-collector
  namespace: rica-platform

---
# PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: rica-platform
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: rica
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: rica-secrets
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rica-secrets
              key: postgres-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command: ["pg_isready", "-U", "$(POSTGRES_USER)"]
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command: ["pg_isready", "-U", "$(POSTGRES_USER)"]
          initialDelaySeconds: 5
          periodSeconds: 5
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 20Gi

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: rica-platform
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  clusterIP: None

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: rica-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - --appendonly
        - "yes"
        - --maxmemory
        - "2gb"
        - --maxmemory-policy
        - "allkeys-lru"
        - --requirepass
        - "$(REDIS_PASSWORD)"
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command: ["redis-cli", "--raw", "incr", "ping"]
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc

---
# Redis PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: rica-platform
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: rica-platform
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---
# Example Tenant Namespace Template
apiVersion: v1
kind: Namespace
metadata:
  name: tenant-{{TENANT_ID}}
  labels:
    rica-tenant: "true"
    tenant-id: "{{TENANT_ID}}"
    subscription-tier: "{{TIER}}"

---
# Tenant Resource Quota Template
apiVersion: v1
kind: ResourceQuota
metadata:
  name: tenant-quota
  namespace: tenant-{{TENANT_ID}}
spec:
  hard:
    requests.cpu: "{{CPU_QUOTA}}m"
    requests.memory: "{{MEMORY_QUOTA}}Gi"
    persistentvolumeclaims: "{{STORAGE_QUOTA}}"
    pods: "10"

---
# Tenant Network Policy (Isolation)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: tenant-isolation
  namespace: tenant-{{TENANT_ID}}
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: rica-platform
    - podSelector: {}
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: rica-platform
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to:
    - namespaceSelector: {}

---
# Tenant ActivePieces Deployment Template
apiVersion: apps/v1
kind: Deployment
metadata:
  name: activepieces
  namespace: tenant-{{TENANT_ID}}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: activepieces
      tenant: "{{TENANT_ID}}"
  template:
    metadata:
      labels:
        app: activepieces
        tenant: "{{TENANT_ID}}"
    spec:
      containers:
      - name: activepieces
        image: activepieces/activepieces:latest
        ports:
        - containerPort: 2020
        env:
        - name: TENANT_ID
          value: "{{TENANT_ID}}"
        - name: CREDIT_SERVICE_URL
          value: "http://credit-metering-service:3100"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"

---
# Tenant Code Server Deployment Template
apiVersion: apps/v1
kind: Deployment
metadata:
  name: codeserver
  namespace: tenant-{{TENANT_ID}}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: codeserver
      tenant: "{{TENANT_ID}}"
  template:
    metadata:
      labels:
        app: codeserver
        tenant: "{{TENANT_ID}}"
    spec:
      containers:
      - name: codeserver
        image: codercom/code-server:latest
        ports:
        - containerPort: 2021
        env:
        - name: TENANT_ID
          value: "{{TENANT_ID}}"
        - name: CREDIT_SERVICE_URL
          value: "http://credit-metering-service:3100"
        volumeMounts:
        - name: workspace
          mountPath: /home/coder/project
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
      volumes:
      - name: workspace
        persistentVolumeClaim:
          claimName: workspace-pvc

---
# Tenant Ollama Deployment Template
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ollama
  namespace: tenant-{{TENANT_ID}}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ollama
      tenant: "{{TENANT_ID}}"
  template:
    metadata:
      labels:
        app: ollama
        tenant: "{{TENANT_ID}}"
    spec:
      containers:
      - name: ollama
        image: ollama/ollama:latest
        ports:
        - containerPort: 2022
        env:
        - name: TENANT_ID
          value: "{{TENANT_ID}}"
        - name: CREDIT_SERVICE_URL
          value: "http://credit-metering-service:3100"
        volumeMounts:
        - name: models
          mountPath: /root/.ollama
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
      volumes:
      - name: models
        persistentVolumeClaim:
          claimName: ollama-models-pvc

---
# Tenant Vircadia Deployment Template
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vircadia
  namespace: tenant-{{TENANT_ID}}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vircadia
      tenant: "{{TENANT_ID}}"
  template:
    metadata:
      labels:
        app: vircadia
        tenant: "{{TENANT_ID}}"
    spec:
      containers:
      - name: vircadia
        image: vircadia/vircadia-server:latest
        ports:
        - containerPort: 2023
        env:
        - name: TENANT_ID
          value: "{{TENANT_ID}}"
        - name: CREDIT_SERVICE_URL
          value: "http://credit-metering-service:3100"
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"

---
# HorizontalPodAutoscaler for Credit Metering
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: credit-metering-hpa
  namespace: rica-platform
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: credit-metering-service
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Ingress for Credit Metering API
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: credit-metering-ingress
  namespace: rica-platform
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  tls:
  - hosts:
    - rica.example.com
    secretName: rica-tls
  rules:
  - host: rica.example.com
    http:
      paths:
      - path: /api/credit(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: credit-metering-service
            port:
              number: 3100

---
# ServiceMonitor for Prometheus (Optional)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: credit-metering-monitor
  namespace: rica-platform
spec:
  selector:
    matchLabels:
      app: credit-metering
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
