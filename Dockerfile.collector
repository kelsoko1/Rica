# Dockerfile for Rica Kubernetes Resource Collector

# Build stage
FROM node:18-alpine AS builder

WORKDIR /app

# Copy package files
COPY rica-api/package*.json ./

# Install dependencies (including dev dependencies for building)
RUN npm ci

# Copy source code
COPY rica-api/services/k8s-resource-collector.js ./services/

# Production stage
FROM node:18-alpine AS production

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create non-root user
RUN addgroup -g 1001 rica && \
    adduser -D -s /bin/sh -u 1001 -G rica rica

WORKDIR /app

# Copy built dependencies from builder stage
COPY --from=builder /app/node_modules ./node_modules

# Copy application code
COPY rica-api/services/k8s-resource-collector.js ./services/

# Install kubectl for in-cluster operation
RUN apk add --no-cache curl && \
    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" && \
    chmod +x kubectl && \
    mv kubectl /usr/local/bin/

# Create necessary directories
RUN mkdir -p /app/logs && \
    chown -R rica:rica /app

# Switch to non-root user
USER rica

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
    CMD node -e "process.exit(0)"

# Use dumb-init to handle signals properly
ENTRYPOINT ["/usr/bin/dumb-init", "--"]

# Start the application
CMD ["node", "services/k8s-resource-collector.js"]

# Set resource limits as defaults
ENV NODE_OPTIONS="--max-old-space-size=256"
